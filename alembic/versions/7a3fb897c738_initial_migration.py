"""Initial migration

Revision ID: 7a3fb897c738
Revises:
Create Date: 2024-10-21 12:04:32.695503

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "7a3fb897c738"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# def upgrade():
#     conn = op.get_bind()
#     if conn.dialect.name == "sqlite":
#         # Manually handle the migration for SQLite
#         op.execute(
#             """
#             CREATE TABLE accessions_new (
#                 id INTEGER NOT NULL PRIMARY KEY,
#                 ship_name TEXT,
#                 accession TEXT,
#                 accession_tag STRING,
#                 accession_new NUMERIC
#             )
#         """
#         )
#         op.execute(
#             """
#             INSERT INTO accessions_new (id, ship_name, accession, accession_tag, accession_new)
#             SELECT id, ship_name, accession, accession_tag, accession_new FROM accessions
#         """
#         )
#         op.execute("DROP TABLE accessions")
#         op.execute("ALTER TABLE accessions_new RENAME TO accessions")
#     else:
#         # For other databases, we can use op.alter_column directly
#         op.alter_column("accessions", "id", nullable=False)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "accessions",
        "id",
        existing_type=sa.INTEGER(),
        nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "captains", "id", existing_type=sa.INTEGER(), nullable=False, autoincrement=True
    )
    op.create_foreign_key(None, "captains", "accessions", ["ship_id"], ["id"])
    op.alter_column(
        "family_names",
        "id",
        existing_type=sa.INTEGER(),
        nullable=False,
        autoincrement=True,
    )
    op.add_column("genomes", sa.Column("taxonomy_id", sa.Integer(), nullable=True))
    op.alter_column(
        "genomes", "id", existing_type=sa.INTEGER(), nullable=False, autoincrement=True
    )
    op.create_foreign_key(None, "genomes", "taxonomy", ["taxonomy_id"], ["id"])
    op.drop_column("genomes", "genus")
    op.drop_column("genomes", "species")
    op.drop_column("genomes", "strain")
    op.alter_column(
        "joined_ships",
        "genome_id",
        existing_type=sa.TEXT(),
        type_=sa.Integer(),
        existing_nullable=True,
    )
    op.alter_column(
        "navis_haplotype",
        "id",
        existing_type=sa.INTEGER(),
        nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "papers", "id", existing_type=sa.INTEGER(), nullable=False, autoincrement=True
    )
    op.alter_column(
        "ships",
        "accession",
        existing_type=sa.TEXT(),
        type_=sa.Integer(),
        existing_nullable=True,
    )
    op.add_column(
        "starship_features", sa.Column("captain_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(None, "starship_features", "captains", ["captain_id"], ["id"])
    op.alter_column(
        "taxonomy", "id", existing_type=sa.INTEGER(), nullable=False, autoincrement=True
    )
    # ### end Alembic commands ###


# def downgrade():
#     conn = op.get_bind()
#     if conn.dialect.name == "sqlite":
#         # To downgrade, you would need to reverse the changes
#         # Here is an example to make the `id` nullable again
#         op.execute(
#             """
#             CREATE TABLE accessions_old (
#                 id INTEGER PRIMARY KEY,
#                 ship_name TEXT,
#                 accession TEXT,
#                 accession_tag STRING,
#                 accession_new NUMERIC
#             )
#         """
#         )
#         op.execute(
#             """
#             INSERT INTO accessions_old (id, ship_name, accession, accession_tag, accession_new)
#             SELECT id, ship_name, accession, accession_tag, accession_new FROM accessions
#         """
#         )
#         op.execute("DROP TABLE accessions")
#         op.execute("ALTER TABLE accessions_old RENAME TO accessions")
#     else:
#         op.alter_column("accessions", "id", nullable=True)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "taxonomy", "id", existing_type=sa.INTEGER(), nullable=True, autoincrement=True
    )
    op.drop_constraint(None, "starship_features", type_="foreignkey")
    op.drop_column("starship_features", "captain_id")
    op.alter_column(
        "ships",
        "accession",
        existing_type=sa.Integer(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "papers", "id", existing_type=sa.INTEGER(), nullable=True, autoincrement=True
    )
    op.alter_column(
        "navis_haplotype",
        "id",
        existing_type=sa.INTEGER(),
        nullable=True,
        autoincrement=True,
    )
    op.alter_column(
        "joined_ships",
        "genome_id",
        existing_type=sa.Integer(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.add_column("genomes", sa.Column("strain", sa.VARCHAR(length=50), nullable=True))
    op.add_column("genomes", sa.Column("species", sa.VARCHAR(length=50), nullable=True))
    op.add_column("genomes", sa.Column("genus", sa.VARCHAR(length=50), nullable=True))
    op.drop_constraint(None, "genomes", type_="foreignkey")
    op.alter_column(
        "genomes", "id", existing_type=sa.INTEGER(), nullable=True, autoincrement=True
    )
    op.drop_column("genomes", "taxonomy_id")
    op.alter_column(
        "family_names",
        "id",
        existing_type=sa.INTEGER(),
        nullable=True,
        autoincrement=True,
    )
    op.drop_constraint(None, "captains", type_="foreignkey")
    op.alter_column(
        "captains", "id", existing_type=sa.INTEGER(), nullable=True, autoincrement=True
    )
    op.alter_column(
        "accessions",
        "id",
        existing_type=sa.INTEGER(),
        nullable=True,
        autoincrement=True,
    )
    # ### end Alembic commands ###
